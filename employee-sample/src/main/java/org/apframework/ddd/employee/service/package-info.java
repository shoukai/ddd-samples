/**
 * 应用服务是外观模式（Facade Pattern）的体现
 * 场景主要包括：
 * 1. 当你要为一个复杂子系统提供一个简单接口时
 * 2. 客户程序与抽象类的实现部分之间存在着很大的依赖性
 * 3. 当你需要构建一个层次结构的子系统时，使用外观模式定义子系统中每层的入口点
 */
package org.apframework.ddd.employee.service;